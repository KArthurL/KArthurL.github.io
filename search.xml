<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>内存可见性、原子性和重排序</title>
    <url>/2020/02/29/%E5%86%85%E5%AD%98%E5%8F%AF%E8%A7%81%E6%80%A7%E3%80%81%E5%8E%9F%E5%AD%90%E6%80%A7%E5%92%8C%E9%87%8D%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p>在上一篇文章中，笔者简单介绍了下<a href="https://karthurl.github.io/2020/02/29/Java%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/" target="_blank" rel="noopener">Java内存模型</a>。本文承接上文，主要以代码+图片的形式呈现给大家，其主要目的是让大家对于并发程序中的内存可见性、原子性以及重排序有一定的了解。这三个问题也是并发程序为什么难写的原因。</p>
<a id="more"></a>
<h1 id="内存可见性"><a href="#内存可见性" class="headerlink" title="内存可见性"></a>内存可见性</h1><p>在说明什么是内存可见性之前，大家可以尝试运行下面的代码，看看结果如何。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Share</span><br><span class="line">&#123;</span><br><span class="line">    private static boolean flag&#x3D;false; &#x2F;&#x2F;这是一个共享变量</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        Thread t&#x3D;new Thread(new Runnable() &#123; &#x2F;&#x2F;新启一个线程</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                while(!flag) &#123;  &#x2F;&#x2F;如果flag&#x3D;&#x3D;true则跳出循环</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t.start(); &#x2F;&#x2F;启动线程</span><br><span class="line">        Thread.sleep(1000);&#x2F;&#x2F;主线程sleep 1秒</span><br><span class="line">        flag&#x3D;true; &#x2F;&#x2F;将共享变量设置为true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>按道理说，当主线程将共享变量设置为true之后，线程t应当跳出循环，程序结束。但事实上当我们运行这段代码后，即使过了几秒，程序仍没有结束，即线程t并没有感知到共享变量flag的变化。这就是一个内存可见性的问题，我们可以结合Java内存模型来理解这个问题，具体看下图。<br><img src="https://i.loli.net/2020/03/01/KT9WDUxStLqiVFd.jpg" alt="share.jpg"><br>看懂了这张图，那么产生内存可见性的原因就显而易见了。所有的共享变量存在于主内存中，每个线程有自己的工作内存，当一个线程将工作内存中的共享变量副本修改后，此时主内存和其他线程工作内存里的共享变量依然是旧值。结合例子，当主线程修改flag为true时，改变的仅仅是主线程工作内存中的flag值，而线程t的工作内存中flag值依然为false，所以仍旧在死循环中。这就是并发下的一个内存可见性的原因。</p>
<p>这里再啰嗦一下，JMM只是一个抽象，如果想知道更底层的原因，需要一些操作系统的知识。线程间的对于共享变量的可见性问题不是直接由多核引起的，而是由多缓存引起的。如果每个核心共享同一个缓存，那么也就不存在内存可见性问题了。现代多核CPU中每个核心拥有自己的一级缓存或一级缓存加上二级缓存等，问题就发生在每个核心的独占缓存上。每个核心都会将自己需要的数据读到独占缓存中，数据修改后也是写入到缓存中，然后等待刷入到主存中。所以会导致有些核心读取的值是一个过期的值。这里说的工作内存并不是真的是一块给每个线程分配的内存，而是JMM的一个抽象，是对于寄存器、一级缓存、二级缓存等的抽象。</p>
<h1 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h1><p>同样的我们尝试运行下面的代码。在这段代码中，我们用volatile关键字修饰了共享变量num，可以解决内存可见性问题（关于为什么volatile关键字可以解决内存可见性后面会有专门对文章解释，这里只需要知道就ok了）。我们来看一下这段代码的结果如何。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Atomic</span><br><span class="line">&#123;</span><br><span class="line">    private static volatile int num&#x3D;0; &#x2F;&#x2F;这是一个volatile修饰的共享变量，可以解决内存可见性</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        Thread t1&#x3D;new Thread(new Runnable() &#123; &#x2F;&#x2F;新启一个线程</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                for (int i&#x3D;0;i&lt;1000;i++)&#123;</span><br><span class="line">                    num++;   &#x2F;&#x2F;对num进行自增1操作</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        Thread t2&#x3D;new Thread(new Runnable() &#123; &#x2F;&#x2F;新启另一个线程</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                for (int i&#x3D;0;i&lt;1000;i++)&#123;</span><br><span class="line">                    num++;   &#x2F;&#x2F;对num进行自增1操作</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start(); &#x2F;&#x2F;启动这两个线程</span><br><span class="line">        t2.start();</span><br><span class="line">        Thread.sleep(1000);</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行几次的结果可能不尽相同，但是都不会是2000。<br>按道理来说，两个线程分别对<strong>num</strong>进行了1000次自增操作，而每次自增的结果都对其他线程是可见的，所以最后<strong>num</strong>应当等于2000才对啊，为什么会出现这种情况？</p>
<p>出现这种情况的关键代码是 <strong>num++</strong>。原因在于 <strong>++</strong>这一操作并非是原子操作。所谓原子操作，意思是“不可被中断的一个或一系列操作”，也就是说这单个或多个操作要么一次性执行完，要么不执行，不存在执行到一半被人插队。我们可以将 <strong>++</strong> 操作其拆分为三步来看：</p>
<ol>
<li><p>从内存中读取共享变量num到寄存器中</p>
</li>
<li><p>寄存器进行自增</p>
</li>
<li><p>将自增后到值写会内存中</p>
</li>
</ol>
<p>这三步中每一步单独的操作都是原子操作，但是这三个操作中间是可以被中断分离开的。我们可以看下面这张表格来直观的感受下。</p>
<table>
<thead>
<tr>
<th align="left">线程1</th>
<th align="left">线程2</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1.读取num，此时线程1中num=0</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">2.寄存器对num进行自增，此时线程1中num=1</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"></td>
<td align="left">1.线程1被挂起，线程2开始执行，读取num，由于线程1中的num还未刷新到主内存中，所以此时线程2中num=0</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">2.寄存器对num进行自增，此时线程2中num=1</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">3.将num写回到内存中去，此时内存中num=1</td>
</tr>
<tr>
<td align="left">3.将线程1中的num写回内存中去，此时内存中num=1</td>
<td align="left"></td>
</tr>
</tbody></table>
<p>我们可以看到，尽管两个线程分别进行了一次自增操作，尽管我们保证了内存可见性，但是由于线程调度的原因，导致线程1的一些列操作被中断，从而最终导致所得的结果与我们预期不符。这就是并发的原子性问题。</p>
<h1 id="重排序"><a href="#重排序" class="headerlink" title="重排序"></a>重排序</h1><p>同样的我们还是通过代码看问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Reorder</span><br><span class="line">&#123;</span><br><span class="line">    private static int x &#x3D; 0, y &#x3D; 0, z &#x3D; 0;</span><br><span class="line">    private static int a &#x3D; 0, b &#x3D; 0, c &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        int i &#x3D; 0;</span><br><span class="line">        for(;;) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            x &#x3D; 0; y &#x3D; 0; z &#x3D; 0;</span><br><span class="line">            a &#x3D; 0; b &#x3D; 0; c &#x3D; 0;</span><br><span class="line">            CountDownLatch latch &#x3D; new CountDownLatch(1);</span><br><span class="line"></span><br><span class="line">            Thread t1 &#x3D; new Thread(() -&gt; &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    latch.await();</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                a &#x3D; 1;</span><br><span class="line">                b &#x3D; 1;</span><br><span class="line">                c &#x3D; 1;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            Thread t2 &#x3D; new Thread(() -&gt; &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    latch.await();</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                z &#x3D; c;</span><br><span class="line">                y &#x3D; b;</span><br><span class="line">                x &#x3D; a;</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">            t1.start();</span><br><span class="line">            t2.start();</span><br><span class="line">            latch.countDown();</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;等两个线程执行完后执行主线程 ps：join方法底层调用wait（）有释放锁的语义，可以保证所有的执行结果对主线程可见</span><br><span class="line">            t1.join();</span><br><span class="line">            t2.join();</span><br><span class="line"></span><br><span class="line">            String result &#x3D; &quot;第&quot; + i + &quot;次 (&quot; + x + &quot;,&quot; + y +&quot;,&quot; + z+ &quot;）&quot;;</span><br><span class="line">            if(z&gt;y||y&gt;x||z&gt;x) &#123;</span><br><span class="line">                System.err.println(result);</span><br><span class="line">                break;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                System.out.println(result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先我们分析代码的逻辑，线程t1按次序分别将 <strong>a、b、c</strong> 三个赋值为1并写回到主内存，线程t2按次序分别读取 <strong>c、b、a</strong> 并赋值给 <strong>x、y、z</strong> 即使考虑到内存可见性的影响，如果上述步骤是按次序执行的话，必然不会出现 <strong>z&gt;y||y&gt;x||z&gt;x</strong> 这类情况，因为能够读取到后一个值的新值，意味着之前的值也已经被刷新到主内存中去了，后续读的话应该也是会读到新值。</p>
<p>相信程序运行不了多久我们就能看到结果。程序产生了与我们预期不符的结果，其原因就在于发生了重排序。</p>
<p>所谓重排序是指编译器和处理器为了优化程序性能而对指令序列进行重排序的一种手段。当然这种重排序是需要遵循一定的规则的，例如：as-if-serial语义。as-if-serial语义的意思是：不管怎么重排序，<strong>单线程</strong> 程序的执行结果不能改变。为了遵守as-if-serial语义，编译器和处理器不会对存在数据依赖关系的操作做重排序，但前提是在<strong>单线程</strong>情况下。这也为编写单线程程序的程序员创建了一个幻觉：单线程程序是按照程序的顺序来执行的。</p>
<p>在这个例子中，可以看到，两个线程中，对变量的赋值是相互不依赖的，所以允许编译器或者处理器对其进行重排序。但是线程2对变量的赋值依赖于线程1中的变量abc，因此产生了问题。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本文以三个例子来简单说明内存可见效、原子性以及重排序这三个问题。在平时并发实践中，这三个问题也是需要我们仔细考虑的。在后续的文章中，我会给出一些Java中的解决方案，例如synchronized、lock等，看看Java中是如何解决这三个问题的。</p>
]]></content>
      <categories>
        <category>Java并发</category>
      </categories>
      <tags>
        <tag>并发</tag>
        <tag>原创</tag>
      </tags>
  </entry>
  <entry>
    <title>Java内存模型</title>
    <url>/2020/02/29/Java%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>本文从Java内存模型开始，通过对内存模型的理解让大家对于并发中的内存可见性、原子性和重排序有一些自己的想法，为后续的Java并发编程打下基础。</p>
<p>阅读本文前，需要有一定的Java基础，最好还有一定的并发编程基础。</p>
<a id="more"></a>
<h1 id="前言：为何需要并发？"><a href="#前言：为何需要并发？" class="headerlink" title="前言：为何需要并发？"></a>前言：为何需要并发？</h1><p>在学习并发之前，我们需要明白为什么需要并发？并发能带来什么好处？</p>
<p>熟悉操作系统的读者应该知道，多任务处理在现代操作系统中几乎已经是一项必备的功能了。在大多数情况下，计算机CPU的运算速度与它的存储和通信子系统的速度差距太大了，大量的时间都花费在了IO、网络通信或者数据库上了。因此我们必须采取一些手段来“压榨”CPU的性能，确保CPU不会在大部分情况下处于空闲状态。此时，并发编程可以实现当某个线程阻塞在IO或者其他耗时操作时，操作系统调度其他线程来使用CPU，确保了CPU大部分时间处于一个工作状态。此外，在如今普遍多核CPU的情况下，单线程依旧只能运行在一个CPU上，其他CPU的资源就浪费了，而多线程的情况下，可以实现多条线程并行执行，大大提高了程序运行的效率。</p>
<p>总而言之，并发编程所带来的好处无疑是很多的，但是同样的，其也会带来一些弊端。多线程并发运行给执行过程带来了很多不确定性，因为只有同一个线程内部代码的执行顺序是固定的，而不同线程之间的代码执行顺序无法确定。当多个线程之间互相干扰时，问题就会接踵而至。编写多线程代码时，如果没有考虑全面很容易产生概率性的、难以复现的Bug。系统进行线程上下文切换时会消耗少量的系统资源，过多的线程反而会使得系统性能下降。因此如何编写出高性能的并发程序变得至关重要。</p>
<h1 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h1><p>在正式学习并发编程之前，我们需要明白并发编程可能会出现哪些问题，而理解这些问题的基础就是理解Java的内存模型。</p>
<h2 id="1-内存模型概述"><a href="#1-内存模型概述" class="headerlink" title="1.内存模型概述"></a>1.内存模型概述</h2><p>在过去，主流程序语言（如C和C++等）直接使用物理硬件和操作系统的内存模型。因此，由于不同平台上内存模型的差异，可能导致程序在一套平台上并发完全正常，而在另一套平台上并发访问出错，所以在某些场景下必须针对不同的平台来编写程序。</p>
<p>Java内存模型（Java Memory Model，简称JMM）是Java虚拟机规范定义的，用来屏蔽掉java程序在各种不同的硬件和操作系统对内存的访问的差异，这样就可以实现java程序在各种不同的平台上都能达到内存访问的一致性。JMM本质上是一套抽象的模型，并非真实存在，我们可以通过下图来直观的了解其结构。</p>
<p><img src="https://i.loli.net/2020/02/29/5sIWqJBjxgYFdQf.jpg" alt="JMM.jpg" title="Java内存模型"></p>
<p>可以看到JMM主要分为三块，分别是：主内存、工作内存和线程。主内存被所有线程共享，而工作内存是线程私有的，不被其他线程可见。下面我们来理解主内存和工作内存。</p>
<h2 id="2-主内存与工作内存"><a href="#2-主内存与工作内存" class="headerlink" title="2.主内存与工作内存"></a>2.主内存与工作内存</h2><p>首先需要强调的是，这里讲的主内存和工作内存与JVM内存区域中的Java堆，栈、方法区等并不是同一个层次的对内存的划分，这两者之间严格来讲几乎没什么关系。在这个基础上，我们接着去理解主内存和工作内存中到底存放着什么。<br><img src="https://i.loli.net/2020/02/29/kvcz68oSr3s7X4A.jpg" alt="主内存和工作内存.jpg"><br>从图中可以直观的了解到，线程之间的共享变量（包括实例字段、静态字段和构成数组对象的元素等）均存储在主内存中，而线程工作时所读/写读共享变量为工作内存中读共享变量副本。JMM规定了规定了线程对变量对所有操作（读取、赋值等）都必须在工作内存中进行，而不能直接读写主内存中的数据。不同的线程之间也无法直接访问对方工作内存中的变量，线程间变量值的传递均需要通过主内存来完成。</p>
<h2 id="3-内存之间的操作"><a href="#3-内存之间的操作" class="headerlink" title="3.内存之间的操作"></a>3.内存之间的操作</h2><p>那么问题来了，工作内存是如何从主内存拷贝数据，主内存又是如何更新数据的呢？JMM中定义了一下八种操作：</p>
<ul>
<li>Lock（锁定）：    作用于主内存变量，将变量标志为一条线程所独占</li>
<li>Unlock（解锁）：    作用于主内存变量，将处于锁定的变量释放出来</li>
<li>Read（读取）：    作用于主内存变量，它将一个变量的值从主内存传输到线程的工作内存中</li>
<li>Load（载入）：    作用于工作内存变量，它把从主内存读取的变量值放入工作内存的副本中</li>
<li>Use（使用）：    作用于工作内存变量，将工作内存变量值传递给执行引擎</li>
<li>Assgin（赋值）：    作用于工作内存变量，将执行引擎的值传递给工作内存的变量</li>
<li>Store（存储）：    作用于工作内存变量，它把工作内存变量传递到主内存中</li>
<li>Write（写入）：    作用于主内存变量，把Store操作从工作内存得到的变量值放入主内存变量中</li>
</ul>
<p>Java虚拟机实现时必须保证上面提及等每一种操作都是原子的、不可再分的（对于double和long类型的变量来说，load、store、read和write在某些平台上可能会有例外）。<br>如果要把一个变量的值从主内存复制到工作内存，那么需要执行read load操作；如果要把一个变量的值从工作内存同步回主内存，那么需要执行store write操作。但是JMM<strong>只能保证2个操作必须顺序执行，但不保证连续执行，即在指令之间可以插入其它指令</strong>。</p>
<p>除此之外，JMM还规定了在执行上述8种基本操作是必须满足如下规则：</p>
<ul>
<li>不允许read、load、store、write单独出现，即不允许一个变量读取到工作内存，但没有变量接收的情况</li>
<li>不允许一个线程丢弃它的assign操作，即变量在工作内存改变必须同步回主内存</li>
<li>不允许一个线程无原因（没有发生assgin赋值操作）把数据从线程的工作内存同步会主内存</li>
<li>一个新的变量只能在主内存中诞生，不允许在工作内存中直接使用未被初始化的变量</li>
<li>一个变量同一时刻只允许一条线程对其进行Lock锁定，但Lock操作可以被同一线程重复执行</li>
<li>如果对一个变量执行Lock锁定，会清空工作内存中该副本的值，即执行引擎使用该值会重新load assgin操作初始化该值</li>
<li>如果一个变量事先没有被Lock锁定，那就不允许进行Unlock操作，也不允许Unlock其它线程锁定的变量</li>
<li>对一个变量执行Unlock操作，必须先把此变量值同步回主内存（store、write操作）</li>
</ul>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>Java内存模型其实并不难理解，但并不意味着它不重要。相信大家看完本文后，通过对JMM的理解，对于为什么多线程会出现内存可见性，原子性以及重排序会有自己的想法。</p>
]]></content>
      <categories>
        <category>Java并发</category>
      </categories>
      <tags>
        <tag>并发</tag>
        <tag>原创</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/02/28/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
